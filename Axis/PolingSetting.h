#pragma once

#include "Common/Axis/Setting.h"

namespace Standard
{
	namespace Axis
	{
		namespace Poling
		{
			////////////////////////////////////////////////////////////////////////////////
			/// @class      CSetting
			/// @brief      軸の監視、軸の制御、状態を通知する設定クラス
			////////////////////////////////////////////////////////////////////////////////
			class CSetting
			{
			public:
				////////////////////////////////////////////////////////////////////////////////
				/// @brief			コンストラクタ
				////////////////////////////////////////////////////////////////////////////////
				CSetting()
				{
					Retry = 3;
				}

				////////////////////////////////////////////////////////////////////////////////
				/// @brief			コピー代入演算子
				/// @return			自クラス
				////////////////////////////////////////////////////////////////////////////////
				CSetting& operator = (const CSetting& object) noexcept
				{
					// 更新
					Update(object);

					return *this;
				}

				////////////////////////////////////////////////////////////////////////////////
				/// @brief			デストラクタ
				////////////////////////////////////////////////////////////////////////////////
				~CSetting()
				{

				}

			protected:
				////////////////////////////////////////////////////////////////////////////////
				/// @brief			自クラスを更新
				/// @param[in]		object	自クラス
				////////////////////////////////////////////////////////////////////////////////
				void Update(const CSetting& object)
				{
					this->Retry = object.Retry;
					this->Default = object.Default;
					this->Connect = object.Connect;
					this->Other = object.Other;
				}

			public:
				//! リトライ回数
				int Retry;

				//! 軸のデフォルトな設定クラス
				Setting::CDefault Default;

				//! 軸へ接続を行う設定クラス
				Setting::CConnect Connect;

				//! その他
				Variant::CManager Other;
			};
		}
	}
}