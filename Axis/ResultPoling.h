#pragma once

#include <mutex>

#include "Signal/Result.h"

namespace Standard
{
	namespace Axis
	{
		// 軸を監視した結果
		namespace Result
		{
			////////////////////////////////////////////////////////////////////////////////
			/// @class      CSuper
			/// @brief      軸を監視した結果のスーパークラス
			///				⇒ 状態を監視した結果の基礎クラスから継承
			////////////////////////////////////////////////////////////////////////////////
			class CSuper
				: virtual public Signal::Result::CBasis
			{
			public:
				////////////////////////////////////////////////////////////////////////////////
				/// @brief			コンストラクタ
				////////////////////////////////////////////////////////////////////////////////
				CSuper() : Signal::Result::CBasis()
				{

				}

				////////////////////////////////////////////////////////////////////////////////
				/// @brief			コピー代入演算子
				/// @return			自クラス
				////////////////////////////////////////////////////////////////////////////////
				CSuper& operator = (const CSuper& object) noexcept
				{
					// 更新
					Update(object);

					return *this;
				}

				////////////////////////////////////////////////////////////////////////////////
				/// @brief			デストラクタ
				////////////////////////////////////////////////////////////////////////////////
				virtual ~CSuper()
				{

				}

			protected:
				////////////////////////////////////////////////////////////////////////////////
				/// @brief			自クラスを更新
				/// @param[in]		object	自クラス
				////////////////////////////////////////////////////////////////////////////////
				void Update(const CSuper& object)
				{
					// 既定の関数
					Signal::Result::CBasis::Update(object);
				}
			};

			namespace Servo
			{
				////////////////////////////////////////////////////////////////////////////////
				/// @class      CBasis
				/// @brief      軸のサーボを制御した結果の基礎クラス
				///				⇒ 軸を監視した結果のスーパークラスから継承
				////////////////////////////////////////////////////////////////////////////////
				class CBasis
					: virtual public Result::CSuper
				{
				public:
					////////////////////////////////////////////////////////////////////////////////
					/// @brief			コンストラクタ
					////////////////////////////////////////////////////////////////////////////////
					CBasis() : Result::CSuper()
					{

					}

					////////////////////////////////////////////////////////////////////////////////
					/// @brief			コピー代入演算子
					/// @return			自クラス
					////////////////////////////////////////////////////////////////////////////////
					CBasis& operator = (const CBasis& object) noexcept
					{
						// 更新
						Update(object);

						return *this;
					}

					////////////////////////////////////////////////////////////////////////////////
					/// @brief			デストラクタ
					////////////////////////////////////////////////////////////////////////////////
					virtual ~CBasis()
					{

					}

				protected:
					////////////////////////////////////////////////////////////////////////////////
					/// @brief			自クラスを更新
					/// @param[in]		object	自クラス
					////////////////////////////////////////////////////////////////////////////////
					void Update(const CSuper& object)
					{
						// 既定の関数
						CSuper::Update(object);
					}
				};
			}
		}

		//! 監視の結果を受信する関数
		typedef void(OnReceive)(std::shared_ptr<Result::CSuper>);
	}
}