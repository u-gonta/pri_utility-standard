#include "pch.h"

#include "Axis/Axis.h"
#include "Common/Version/Manager.h"
#include "Worker.h"

namespace Standard
{
	namespace Axis
	{
		//! 軸の制御を行うクラス
		static CWorker _device;

		////////////////////////////////////////////////////////////////////////////////
		/// @brief			バージョンのクラスを取得
		////////////////////////////////////////////////////////////////////////////////
		AXIS_API Version::CObject GetVersion()
		{
			Version::CObject ret;

			Version::CManager& versionManager = Version::CManager::Instance();

			// バージョンのクラスを取得
			ret = versionManager.GetVersion();

			return ret;
		}

		////////////////////////////////////////////////////////////////////////////////
		/// @brief			例外を通知する関数の登録
		/// @detail			例外の発生時に呼び出されたい関数を指定する
		/// @param[in]		object	呼び出されたい関数
		////////////////////////////////////////////////////////////////////////////////
		AXIS_API void AttachFunctionException(std::function<void(const Exception::CObject&)> object)
		{
			// 例外を通知する関数の登録
			_device.AttachFunctionException(object);
		}

		////////////////////////////////////////////////////////////////////////////////
		/// @brief			例外を通知する関数の解除
		/// @detail			例外の発生時に呼び出される関数を解除する
		////////////////////////////////////////////////////////////////////////////////
		AXIS_API void DetachFunctionException()
		{
			// 例外を通知する関数の解除
			_device.DetachFunctionException();
		}

		////////////////////////////////////////////////////////////////////////////////
		/// @brief			入力の変化を通知する関数の登録
		/// @detail			入力の変化時に呼び出されたい関数を指定する
		/// @param[in]		object	呼び出されたい関数
		////////////////////////////////////////////////////////////////////////////////
		AXIS_API void AttachFunctionInput(std::function<void(const Status::CInput&)> object)
		{
			// 入力の変化を通知する関数の登録
			_device.AttachFunctionInput(object);
		}

		////////////////////////////////////////////////////////////////////////////////
		/// @brief			入力の変化を通知する関数の解除
		/// @detail			入力の変化時に呼び出される関数を解除する
		////////////////////////////////////////////////////////////////////////////////
		AXIS_API void DetachFunctionInput()
		{
			// 入力の変化を通知する関数の解除
			_device.DetachFunctionInput();
		}

		////////////////////////////////////////////////////////////////////////////////
		/// @brief			初期化
		/// @param[in]		object	デフォルトの設定クラス
		////////////////////////////////////////////////////////////////////////////////
		AXIS_API void Initialize(const Setting::CDefault& object)
		{
			// 初期化
			_device.Initialize(object);
		}

		////////////////////////////////////////////////////////////////////////////////
		/// @brief			破棄
		////////////////////////////////////////////////////////////////////////////////
		AXIS_API void Destroy()
		{
			// 破棄
			_device.Destroy();
		}

		////////////////////////////////////////////////////////////////////////////////
		/// @brief			接続
		/// @param[in]		object	接続の設定クラス
		////////////////////////////////////////////////////////////////////////////////
		AXIS_API void Connect(const Setting::CConnect& object)
		{
			// 接続
			_device.Connect(object);
		}

		////////////////////////////////////////////////////////////////////////////////
		/// @brief			切断
		////////////////////////////////////////////////////////////////////////////////
		AXIS_API void Disconnect()
		{
			// 切断
			_device.Disconnect();
		}

		////////////////////////////////////////////////////////////////////////////////
		/// @brief			サーボを制御
		/// @param[in]		object	軸のサーボ状態(出力)を指定するクラス
		////////////////////////////////////////////////////////////////////////////////
		AXIS_API void Servo(const Status::Output::CServo& object)
		{
			// サーボを制御
			_device.Servo(object);
		}

		////////////////////////////////////////////////////////////////////////////////
		/// @brief			ジョグを開始
		/// @param[in]		object 軸のジョグ実行を指定するクラス
		////////////////////////////////////////////////////////////////////////////////
		AXIS_API void StartJog(const Status::Output::CStartJog& object)
		{
			// ジョグを開始
			_device.StartJog(object);
		}

		////////////////////////////////////////////////////////////////////////////////
		/// @brief			ジョグを停止
		/// @param[in]		object 軸のジョグ停止を指定するクラス
		////////////////////////////////////////////////////////////////////////////////
		AXIS_API void StopJog(const Status::Output::CStopJog& object)
		{
			// ジョグを停止
			_device.StopJog(object);
		}

		////////////////////////////////////////////////////////////////////////////////
		/// @brief			移動を開始
		////////////////////////////////////////////////////////////////////////////////
		AXIS_API void StartMove()
		{
			// 移動を開始
		}

		////////////////////////////////////////////////////////////////////////////////
		/// @brief			移動を停止
		////////////////////////////////////////////////////////////////////////////////
		AXIS_API void StopMove()
		{
			// 移動を停止
		}
	}
}