#pragma once

#include "Signal/Result.h"

namespace Standard
{
	namespace Axis
	{
		namespace Result
		{
			////////////////////////////////////////////////////////////////////////////////
			/// @class      CServo
			/// @brief      サーボ制御の結果クラス
			///				⇒ 状態を監視した結果の基礎クラスから継承
			////////////////////////////////////////////////////////////////////////////////
			class CServo
				: virtual public Signal::Result::CBasis
			{
			public:
				////////////////////////////////////////////////////////////////////////////////
				/// @brief			コンストラクタ
				////////////////////////////////////////////////////////////////////////////////
				CServo() : Signal::Result::CBasis()
				{

				}

				////////////////////////////////////////////////////////////////////////////////
				/// @brief			コピー代入演算子
				/// @return			自クラス
				////////////////////////////////////////////////////////////////////////////////
				CServo& operator = (const CServo& object) noexcept
				{
					return *this;
				}

				////////////////////////////////////////////////////////////////////////////////
				/// @brief			デストラクタ
				////////////////////////////////////////////////////////////////////////////////
				~CServo()
				{

				}
			};
		}

		//! サーボ制御の完了時に発生する関数
		typedef void(OnServo)(std::shared_ptr<Result::CServo>);
	}
}