#pragma once

#include "Axis/WritePoling.h"

namespace Standard
{
	namespace Axis
	{
		namespace Write
		{
			////////////////////////////////////////////////////////////////////////////////
			/// @class      CInitialize
			/// @brief      軸の初期化を制御する情報クラス
			///				⇒ 軸を制御する情報のスーパークラスから継承
			////////////////////////////////////////////////////////////////////////////////
			class CInitialize
				: virtual public Write::CSuper
			{
			public:
				////////////////////////////////////////////////////////////////////////////////
				/// @brief			コンストラクタ
				////////////////////////////////////////////////////////////////////////////////
				CInitialize()
				{

				}

				////////////////////////////////////////////////////////////////////////////////
				/// @brief			コピー代入演算子
				/// @return			自クラス
				////////////////////////////////////////////////////////////////////////////////
				CInitialize& operator = (const CInitialize& object) noexcept
				{
					// 更新
					Update(object);

					return *this;
				}

				////////////////////////////////////////////////////////////////////////////////
				/// @brief			デストラクタ
				////////////////////////////////////////////////////////////////////////////////
				virtual ~CInitialize()
				{

				}

			protected:
				////////////////////////////////////////////////////////////////////////////////
				/// @brief			自クラスを更新
				/// @param[in]		object	自クラス
				////////////////////////////////////////////////////////////////////////////////
				void Update(const CInitialize& object)
				{
					// 既定の関数
					CSuper::Update(object);
				}
			};

			////////////////////////////////////////////////////////////////////////////////
			/// @class      CServo
			/// @brief      軸のサーボを制御する情報クラス
			///				⇒ 軸のサーボを制御する情報の基礎クラスから継承
			////////////////////////////////////////////////////////////////////////////////
			class CServo
				: virtual public Write::Servo::CBasis
			{
			public:
				////////////////////////////////////////////////////////////////////////////////
				/// @brief			コンストラクタ
				////////////////////////////////////////////////////////////////////////////////
				CServo() : CBasis()
				{

				}

				////////////////////////////////////////////////////////////////////////////////
				/// @brief			コピー代入演算子
				/// @return			自クラス
				////////////////////////////////////////////////////////////////////////////////
				CServo& operator = (const CServo& object) noexcept
				{
					// 更新
					Update(object);

					return *this;
				}

				////////////////////////////////////////////////////////////////////////////////
				/// @brief			デストラクタ
				////////////////////////////////////////////////////////////////////////////////
				~CServo() override
				{

				}

			protected:
				////////////////////////////////////////////////////////////////////////////////
				/// @brief			自クラスを更新
				/// @param[in]		object	自クラス
				////////////////////////////////////////////////////////////////////////////////
				void Update(const CServo& object)
				{
					// 既定の関数
					Write::Servo::CBasis::Update(object);
				}
			};
		}
	}
}