#pragma once

namespace Standard
{
	namespace Grabber
	{
		namespace Condition
		{
			////////////////////////////////////////////////////////////////////////////////
			/// @class      CRangeDouble
			/// @brief      実数値の範囲を保持するクラス
			////////////////////////////////////////////////////////////////////////////////
			class CRangeDouble
			{
			public:
				////////////////////////////////////////////////////////////////////////////////
				/// @brief			コンストラクタ
				////////////////////////////////////////////////////////////////////////////////
				CRangeDouble()
				{
					Minimum = 0;
					Maximum = 0;
					Increment = 0;
				}

				////////////////////////////////////////////////////////////////////////////////
				/// @brief			コピー代入演算子
				/// @return			自クラス
				////////////////////////////////////////////////////////////////////////////////
				CRangeDouble& operator = (const CRangeDouble& object) noexcept
				{
					// 更新
					Update(object);

					return *this;
				}

				////////////////////////////////////////////////////////////////////////////////
				/// @brief			デストラクタ
				////////////////////////////////////////////////////////////////////////////////
				~CRangeDouble()
				{

				}

			protected:
				////////////////////////////////////////////////////////////////////////////////
				/// @brief			自クラスを更新
				/// @param[in]		object	自クラス
				////////////////////////////////////////////////////////////////////////////////
				void Update(const CRangeDouble& object)
				{
					this->Minimum = object.Minimum;
					this->Maximum = object.Maximum;
					this->Increment = object.Increment;
				}

			public:
				//! 最小値
				double Minimum;

				//! 最大値
				double Maximum;

				//! インクリメント
				double Increment;
			};

			////////////////////////////////////////////////////////////////////////////////
			/// @class      CCapture
			/// @brief      撮像の条件を保持するクラス
			////////////////////////////////////////////////////////////////////////////////
			class CCapture
			{
			public:
				////////////////////////////////////////////////////////////////////////////////
				/// @brief			コンストラクタ
				////////////////////////////////////////////////////////////////////////////////
				CCapture()
				{
					WidthMaximum = 720;
					HeightMaximum = 540;
					AnalogGain.Maximum = 300;
					DigitalGain.Maximum = 300;
					ExposureTime.Minimum = 1;
					ExposureTime.Maximum = 99999;
				}

				////////////////////////////////////////////////////////////////////////////////
				/// @brief			コピー代入演算子
				/// @return			自クラス
				////////////////////////////////////////////////////////////////////////////////
				CCapture& operator = (const CCapture& object) noexcept
				{
					// 更新
					Update(object);

					return *this;
				}

				////////////////////////////////////////////////////////////////////////////////
				/// @brief			デストラクタ
				////////////////////////////////////////////////////////////////////////////////
				~CCapture()
				{

				}

			protected:
				////////////////////////////////////////////////////////////////////////////////
				/// @brief			自クラスを更新
				/// @param[in]		object	自クラス
				////////////////////////////////////////////////////////////////////////////////
				void Update(const CCapture& object)
				{
					this->WidthMaximum = object.WidthMaximum;
					this->HeightMaximum = object.HeightMaximum;
					this->AnalogGain = object.AnalogGain;
					this->DigitalGain = object.DigitalGain;
					this->ExposureTime = object.ExposureTime;
				}

			public:
				//! 画像の最大幅
				int WidthMaximum;

				//! 画像の最大高さ
				int HeightMaximum;

				//! アナログゲインの範囲
				CRangeDouble AnalogGain;

				//! デジタルゲインの範囲
				CRangeDouble DigitalGain;

				//! 露光時間の範囲
				CRangeDouble ExposureTime;
			};
		}
	}
}
