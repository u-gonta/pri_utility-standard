#pragma once

#include "Common/Variant/Basis.h"

namespace Standard
{
	namespace Grabber
	{
		// 設定
		namespace Setting
		{
			////////////////////////////////////////////////////////////////////////////////
			/// @class      CDefault
			/// @brief      カメラのデフォルトな設定クラス
			////////////////////////////////////////////////////////////////////////////////
			class CDefault
			{
			public:
				////////////////////////////////////////////////////////////////////////////////
				/// @brief			コンストラクタ
				////////////////////////////////////////////////////////////////////////////////
				CDefault()
				{
					ImageWidth = 640;
					ImageHeight = 480;
					HeartbeatTimeout = 3000000;		// 3秒
					CaptureTimeout = 1000;			// 1秒
					CaptureRetry = 3;
				}

				////////////////////////////////////////////////////////////////////////////////
				/// @brief			コピー代入演算子
				/// @return			自クラス
				////////////////////////////////////////////////////////////////////////////////
				CDefault& operator = (const CDefault& object) noexcept
				{
					// 更新
					Update(object);

					return *this;
				}

				////////////////////////////////////////////////////////////////////////////////
				/// @brief			デストラクタ
				////////////////////////////////////////////////////////////////////////////////
				~CDefault()
				{

				}

			protected:
				////////////////////////////////////////////////////////////////////////////////
				/// @brief			自クラスを更新
				/// @param[in]		object	自クラス
				////////////////////////////////////////////////////////////////////////////////
				void Update(const CDefault& object)
				{
					this->ImageHeight = object.ImageHeight;
					this->ImageWidth = object.ImageWidth;
					this->HeartbeatTimeout = object.HeartbeatTimeout;
					this->CaptureTimeout = object.CaptureTimeout;
					this->CaptureRetry = object.CaptureRetry;
					this->Other = object.Other;
				}

			public:
				//! 画像の幅
				int ImageWidth;

				//! 画像の高さ
				int ImageHeight;

				//! HeartbeatTimeoutタイムアウト[us]
				double HeartbeatTimeout;

				//! 取り込みのタイムアウト[ms]
				double CaptureTimeout;

				//! 取り込みのリトライ回数
				int CaptureRetry;

				//! その他
				Variant::CManager Other;
			};

			////////////////////////////////////////////////////////////////////////////////
			/// @class      CConnect
			/// @brief      カメラに接続する設定クラス
			////////////////////////////////////////////////////////////////////////////////
			class CConnect
			{
			public:
				////////////////////////////////////////////////////////////////////////////////
				/// @brief			コンストラクタ
				////////////////////////////////////////////////////////////////////////////////
				CConnect()
				{
					Identifier = "";
				}

				////////////////////////////////////////////////////////////////////////////////
				/// @brief			コピー代入演算子
				/// @return			自クラス
				////////////////////////////////////////////////////////////////////////////////
				CConnect& operator = (const CConnect& object) noexcept
				{
					// 更新
					Update(object);

					return *this;
				}

				////////////////////////////////////////////////////////////////////////////////
				/// @brief			デストラクタ
				////////////////////////////////////////////////////////////////////////////////
				~CConnect()
				{

				}

			protected:
				////////////////////////////////////////////////////////////////////////////////
				/// @brief			自クラスを更新
				/// @param[in]		object	自クラス
				////////////////////////////////////////////////////////////////////////////////
				void Update(const CConnect& object)
				{
					this->Identifier = object.Identifier;
					this->Other = object.Other;
				}

			public:
				//! カメラの識別子
				std::string Identifier;

				//! その他
				Variant::CManager Other;
			};
		}
	}
}