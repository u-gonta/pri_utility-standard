#pragma once

#include <type_traits>

namespace Standard
{
	namespace Iterator
	{
		////////////////////////////////////////////////////////////////////////////////
		/// @class      COpenController
		/// @brief      列挙子の走査を行うクラス
		////////////////////////////////////////////////////////////////////////////////
		template <typename Enum, Enum first, Enum last>
		class CWorker
		{
			//! 列挙型の基底型
			typedef typename std::underlying_type<Enum>::type target;

			//! イテレータの現在値
			int value;

		public:
			////////////////////////////////////////////////////////////////////////////////
			/// @brief			コンストラクタ
			////////////////////////////////////////////////////////////////////////////////
			CWorker(const Enum& f) : value(static_cast<target>(f))
			{

			}

			////////////////////////////////////////////////////////////////////////////////
			/// @brief			コンストラクタ
			////////////////////////////////////////////////////////////////////////////////
			CWorker() : value(static_cast<target>(first))
			{

			}

			////////////////////////////////////////////////////////////////////////////////
			/// @brief			インクリメント演算子
			/// @return			自クラス
			////////////////////////////////////////////////////////////////////////////////
			CWorker operator++()
			{
				++value;

				return *this;
			}

			////////////////////////////////////////////////////////////////////////////////
			/// @brief			関節参照演算子
			/// @return			自クラス
			////////////////////////////////////////////////////////////////////////////////
			Enum operator*()
			{
				return static_cast<Enum>(value);
			}

			////////////////////////////////////////////////////////////////////////////////
			/// @brief			二項等値演算子
			/// @param[in]		object	列挙子のイテレータを行う基礎クラス
			/// @return			true:等しくない / false:等しい
			////////////////////////////////////////////////////////////////////////////////
			bool operator!=(const CWorker& object)
			{
				return value != object.value;
			}

			////////////////////////////////////////////////////////////////////////////////
			/// @brief			先頭の要素を取得
			/// @return			自クラス
			////////////////////////////////////////////////////////////////////////////////
			CWorker begin()
			{
				return *this;
			}

			////////////////////////////////////////////////////////////////////////////////
			/// @brief			最後尾の要素を取得
			/// @return			自クラス
			////////////////////////////////////////////////////////////////////////////////
			CWorker end()
			{
				static const CWorker endIter = ++CWorker(last);

				return endIter;
			}
		};
	}
}