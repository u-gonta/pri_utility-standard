#pragma once

#include <sstream>

namespace Standard
{
	namespace Logging
	{
		//! 区切り文字
		const char ConstSeparator = '\t';

		////////////////////////////////////////////////////////////////////////////////
		/// @enum			ログのレベル
		////////////////////////////////////////////////////////////////////////////////
		enum EnumLevel
		{
			LevelTrace,			// トレース ※Debugよりも詳細な情報など(画像検出時の輝度値…)
			LevelDebug,			// デバッグ ※システムの動作状況に関する詳細な情報など(PLCのレジスタ変更時…)
			LevelInfomation,	// 情報 ※情報など(カメラの接続、ボタンのクリック…)
			LevelError			// エラー ※予期しないエラーなど(カメラの切断、不正アクセス…)
		};

		////////////////////////////////////////////////////////////////////////////////
		/// @class      CObject
		/// @brief      ログの情報を保持するクラス
		////////////////////////////////////////////////////////////////////////////////
		class CObject
		{
		public:
			////////////////////////////////////////////////////////////////////////////////
			/// @brief			コンストラクタ
			////////////////////////////////////////////////////////////////////////////////
			CObject()
			{
				Level = LevelInfomation;
				Message.str("");
			}

			////////////////////////////////////////////////////////////////////////////////
			/// @brief			コンストラクタ
			/// @param[in]		object	自クラス
			////////////////////////////////////////////////////////////////////////////////
			CObject(const CObject& object)
			{
				// 更新
				Update(object.Level, object.Message.str());
			}

			////////////////////////////////////////////////////////////////////////////////
			/// @brief			コンストラクタ
			/// @param[in]		level	ログのレベル
			/// @param[in]		message	ログのメッセージ
			////////////////////////////////////////////////////////////////////////////////
			CObject(EnumLevel level, const std::string& message)
			{
				// 更新
				Update(level, message);
			}

			////////////////////////////////////////////////////////////////////////////////
			/// @brief			コピー代入演算子
			/// @return			自クラス
			////////////////////////////////////////////////////////////////////////////////
			CObject& operator = (const CObject& object) noexcept
			{
				// 更新
				Update(object);

				return *this;
			}

			////////////////////////////////////////////////////////////////////////////////
			/// @brief			デストラクタ
			////////////////////////////////////////////////////////////////////////////////
			~CObject()
			{

			}

		protected:
			////////////////////////////////////////////////////////////////////////////////
			/// @brief			自クラスを更新
			/// @param[in]		object	自クラス
			////////////////////////////////////////////////////////////////////////////////
			void Update(const CObject& object)
			{
				// 更新
				Update(object.Level, object.Message.str());
			}

		private:
			////////////////////////////////////////////////////////////////////////////////
			/// @brief			自クラスを更新
			/// @param[in]		level	ログのレベル
			/// @param[in]		message	ログのメッセージ
			////////////////////////////////////////////////////////////////////////////////
			void Update(EnumLevel level, const std::string& message)
			{
				this->Level = level;
				this->Message.str("");
				this->Message << message;
			}

		public:
			//! ログのレベル
			EnumLevel Level;

			//! ログのメッセージ
			std::stringstream Message;
		};
	}
}