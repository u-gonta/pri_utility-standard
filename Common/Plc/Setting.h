#pragma once

#include "Common/Variant/Basis.h"

namespace Standard
{
	namespace Plc
	{
		namespace Setting
		{
			////////////////////////////////////////////////////////////////////////////////
			/// @class      CDefault
			/// @brief      Plcのデフォルトな設定クラス
			////////////////////////////////////////////////////////////////////////////////
			class CDefault
			{
			public:
				////////////////////////////////////////////////////////////////////////////////
				/// @brief			コンストラクタ
				////////////////////////////////////////////////////////////////////////////////
				CDefault()
				{
					Cycle = 10;
					Retry = 3;
				}

				////////////////////////////////////////////////////////////////////////////////
				/// @brief			コピー代入演算子
				/// @return			自クラス
				////////////////////////////////////////////////////////////////////////////////
				CDefault& operator = (const CDefault& object) noexcept
				{
					// 更新
					Update(object);

					return *this;
				}

				////////////////////////////////////////////////////////////////////////////////
				/// @brief			デストラクタ
				////////////////////////////////////////////////////////////////////////////////
				~CDefault()
				{

				}

			private:
				////////////////////////////////////////////////////////////////////////////////
				/// @brief			自クラスを更新
				/// @param[in]		object	自クラス
				////////////////////////////////////////////////////////////////////////////////
				void Update(const CDefault& object)
				{
					this->Cycle = object.Cycle;
					this->Retry = object.Retry;
					this->Other = object.Other;
				}

			public:
				//! ポーリングの周期[ms]
				int Cycle;

				//! リトライ回数
				int Retry;

				//! その他
				Variant::CManager Other;
			};

			////////////////////////////////////////////////////////////////////////////////
			/// @class      CConnect
			/// @brief      Plcに接続する設定クラス
			////////////////////////////////////////////////////////////////////////////////
			class CConnect
			{
			public:
				////////////////////////////////////////////////////////////////////////////////
				/// @brief			コンストラクタ
				////////////////////////////////////////////////////////////////////////////////
				CConnect()
				{

				}

				////////////////////////////////////////////////////////////////////////////////
				/// @brief			コピー代入演算子
				/// @return			自クラス
				////////////////////////////////////////////////////////////////////////////////
				CConnect& operator = (const CConnect& object) noexcept
				{
					// 更新
					Update(object);

					return *this;
				}

				////////////////////////////////////////////////////////////////////////////////
				/// @brief			デストラクタ
				////////////////////////////////////////////////////////////////////////////////
				~CConnect()
				{

				}

			protected:
				////////////////////////////////////////////////////////////////////////////////
				/// @brief			自クラスを更新
				/// @param[in]		object	自クラス
				////////////////////////////////////////////////////////////////////////////////
				void Update(const CConnect& object)
				{
					this->Other = object.Other;
				}

			public:
				//! その他
				Variant::CManager Other;
			};
		}
	}
}