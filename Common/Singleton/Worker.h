#pragma once

#include<memory>

namespace Standard
{
	namespace Singleton
	{
		namespace Worker
		{
			////////////////////////////////////////////////////////////////////////////////
			/// @class      CTemplate
			/// @brief      シングルトン化するテンプレートのクラス
			/// @param[in]	T	シングルトン化するクラス(テンプレートで指定)
			////////////////////////////////////////////////////////////////////////////////
			template <class T>
			class CTemplate
			{
			public:
				////////////////////////////////////////////////////////////////////////////////
				/// @brief			インスタンスの取得
				////////////////////////////////////////////////////////////////////////////////
				static T& Instance()
				{
					static typename T::SingletonPointerType singleton(T::CreateInstance());

					return GetReference(singleton);
				}

			private:
				//! インスタンス
				typedef std::unique_ptr<T> SingletonPointerType;

				////////////////////////////////////////////////////////////////////////////////
				/// @brief			インスタンスの構築
				////////////////////////////////////////////////////////////////////////////////
				inline static T* CreateInstance()
				{
					return new T();
				}

				////////////////////////////////////////////////////////////////////////////////
				/// @brief			インスタンスの取得
				////////////////////////////////////////////////////////////////////////////////
				inline static T& GetReference(const SingletonPointerType& ptr)
				{
					return *ptr;
				}

			protected:
				////////////////////////////////////////////////////////////////////////////////
				/// @brief			コンストラクタ
				////////////////////////////////////////////////////////////////////////////////
				CTemplate()
				{

				}

				// 派生先でデフォルトコンストラクタ以外でインスタンスを構築したい場合、CreateInstance()を上書きする
				/*
				***(int)
				{
					std::cout << "***(int)" << std::endl;
				}

				static *** *CreateInstance()
				{
					return new C***(0);
				}
				*/

			private:
				////////////////////////////////////////////////////////////////////////////////
				/// @brief			コピーコンストラクタ
				/// @detail			無効にする
				////////////////////////////////////////////////////////////////////////////////
				CTemplate(const CTemplate&) = delete;

				////////////////////////////////////////////////////////////////////////////////
				/// @brief			コピー代入演算子
				/// @detail			無効にする
				////////////////////////////////////////////////////////////////////////////////
				CTemplate& operator = (const CTemplate&) = delete;

				////////////////////////////////////////////////////////////////////////////////
				/// @brief			コピーコンストラクタ
				/// @detail			無効にする
				////////////////////////////////////////////////////////////////////////////////
				CTemplate(CTemplate&&) = delete;

				////////////////////////////////////////////////////////////////////////////////
				/// @brief			コピー代入演算子
				/// @detail			無効にする
				////////////////////////////////////////////////////////////////////////////////
				CTemplate& operator = (CTemplate&&) = delete;
			};
		}
	}
}