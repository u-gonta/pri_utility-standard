#pragma once

#include <chrono>

#include "../Tool/Text.h"

namespace Standard
{
	namespace Utility
	{
		////////////////////////////////////////////////////////////////////////////////
		/// @class      CStopWatch
		/// @brief      ストップウォッチのクラス
		///	@detail		経過時間を計測する
		////////////////////////////////////////////////////////////////////////////////
		class CStopWatch
		{
		public:
			////////////////////////////////////////////////////////////////////////////////
			/// @brief			コンストラクタ
			////////////////////////////////////////////////////////////////////////////////
			CStopWatch()
			{
				// 開始
				Start();
			}

			////////////////////////////////////////////////////////////////////////////////
			/// @brief			デストラクタ
			////////////////////////////////////////////////////////////////////////////////
			~CStopWatch()
			{

			}

			////////////////////////////////////////////////////////////////////////////////
			/// @brief			計測を開始
			////////////////////////////////////////////////////////////////////////////////
			void Start()
			{
				m_start = std::chrono::high_resolution_clock::now();
				m_end = m_start;
			}

			////////////////////////////////////////////////////////////////////////////////
			/// @brief			計測を開始
			/// @detail			停止時間のみ更新する
			/// @return			経過時間[ms]
			////////////////////////////////////////////////////////////////////////////////
			float Stop()
			{
				float ret = 0;

				m_end = std::chrono::high_resolution_clock::now();

				// 経過時間を取得
				ret = Elapsed();

				return ret;
			}

			////////////////////////////////////////////////////////////////////////////////
			/// @brief			計測を開始し直す
			/// @detail			停止して開始を実施する
			/// @return			経過時間[ms]
			////////////////////////////////////////////////////////////////////////////////
			float Restart()
			{
				float ret = 0;

				// 停止
				ret = Stop();

				m_start = m_end;

				return ret;
			}

			////////////////////////////////////////////////////////////////////////////////
			/// @brief			経過時間を取得
			/// @return			経過時間[ms]
			////////////////////////////////////////////////////////////////////////////////
			float Elapsed()
			{
				float ret = 0;

				ret = std::chrono::duration_cast<std::chrono::duration<float, std::ratio<1, 1000>>>(m_end - m_start).count();

				return ret;
			}

			////////////////////////////////////////////////////////////////////////////////
			/// @brief			経過時間を文字列で取得
			/// @detail			文字列で渡すのと同時に計測を開始し直す
			/// @param[in]		unit	true:単位を付加 / false:単位の付加しない
			/// @return			経過時間の文字列
			////////////////////////////////////////////////////////////////////////////////
			std::string Format(bool unit)
			{
				std::stringstream ret;

				// 単位を付加するか確認
				if (unit)
				{
					ret << "タクト:";
				}

				// 経過時間を文字列に変換
				ret << Text::Format(3, (double)Restart());

				// 単位を付加するか確認
				if (unit)
				{
					ret << "[ms]";
				}

				return ret.str();
			}

		private:
			//! 開始の時間
			std::chrono::high_resolution_clock::time_point m_start;

			//! 停止の時間
			std::chrono::high_resolution_clock::time_point m_end;
		};
	}
}