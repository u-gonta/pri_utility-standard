#pragma once

#include "WrapperMotionApi/Result.h"

namespace Standard
{
	namespace Plc
	{
		namespace Controller
		{
			namespace Result
			{
				////////////////////////////////////////////////////////////////////////////////
				/// @class      CInitialize
				/// @brief      コントローラを初期化した結果クラス
				////////////////////////////////////////////////////////////////////////////////
				class CInitialize
				{
				public:
					////////////////////////////////////////////////////////////////////////////////
					/// @brief			コンストラクタ
					////////////////////////////////////////////////////////////////////////////////
					CInitialize()
					{

					}

					////////////////////////////////////////////////////////////////////////////////
					/// @brief			コピー代入演算子
					/// @return			自クラス
					////////////////////////////////////////////////////////////////////////////////
					CInitialize& operator = (const CInitialize& object) noexcept
					{
						// 更新
						Update(object);

						return *this;
					}

					////////////////////////////////////////////////////////////////////////////////
					/// @brief			デストラクタ
					////////////////////////////////////////////////////////////////////////////////
					~CInitialize()
					{

					}

				protected:
					////////////////////////////////////////////////////////////////////////////////
					/// @brief			自クラスを更新
					/// @param[in]		object	自クラス
					////////////////////////////////////////////////////////////////////////////////
					void Update(const CInitialize& object)
					{
						this->Controller = object.Controller;
					}

				public:
					//! コントローラを開いた結果クラス
					MotionApi::Controller::Result::COpen Controller;
				};
			}
		}

		namespace Register
		{
			namespace Result
			{
				////////////////////////////////////////////////////////////////////////////////
				/// @class      CContent
				/// @brief      レジスタの値クラス
				////////////////////////////////////////////////////////////////////////////////
				class CContent
				{
				public:
					////////////////////////////////////////////////////////////////////////////////
					/// @brief			コンストラクタ
					////////////////////////////////////////////////////////////////////////////////
					CContent()
					{

					}

					////////////////////////////////////////////////////////////////////////////////
					/// @brief			コピー代入演算子
					/// @return			自クラス
					////////////////////////////////////////////////////////////////////////////////
					CContent& operator = (const CContent& object) noexcept
					{
						// 更新
						Update(object);

						return *this;
					}

					////////////////////////////////////////////////////////////////////////////////
					/// @brief			デストラクタ
					////////////////////////////////////////////////////////////////////////////////
					~CContent()
					{

					}

				protected:
					////////////////////////////////////////////////////////////////////////////////
					/// @brief			自クラスを更新
					/// @param[in]		object	自クラス
					////////////////////////////////////////////////////////////////////////////////
					void Update(const CContent& object)
					{
						this->Bits.clear();
						this->Bits.insert(object.Bits.begin(), object.Bits.end());
						this->Words.clear();
						this->Words.insert(object.Words.begin(), object.Words.end());
						this->Longs.clear();
						this->Longs.insert(object.Longs.begin(), object.Longs.end());
					}

				public:
					//! ビット型のデータ
					std::map<unsigned long, short> Bits;

					//! ワード型のデータ
					std::map<unsigned long, short> Words;

					//! ロング型のデータ
					std::map<unsigned long, long> Longs;
				};
			}
		}

		namespace Axis
		{
			namespace Result
			{
				////////////////////////////////////////////////////////////////////////////////
				/// @class      CInitialize
				/// @brief      軸を初期化した結果クラス
				////////////////////////////////////////////////////////////////////////////////
				class CInitialize
				{
				public:
					////////////////////////////////////////////////////////////////////////////////
					/// @brief			コンストラクタ
					////////////////////////////////////////////////////////////////////////////////
					CInitialize()
					{

					}

					////////////////////////////////////////////////////////////////////////////////
					/// @brief			コピー代入演算子
					/// @return			自クラス
					////////////////////////////////////////////////////////////////////////////////
					CInitialize& operator = (const CInitialize& object) noexcept
					{
						// 更新
						Update(object);

						return *this;
					}

					////////////////////////////////////////////////////////////////////////////////
					/// @brief			デストラクタ
					////////////////////////////////////////////////////////////////////////////////
					~CInitialize()
					{

					}

				protected:
					////////////////////////////////////////////////////////////////////////////////
					/// @brief			自クラスを更新
					/// @param[in]		object	自クラス
					////////////////////////////////////////////////////////////////////////////////
					void Update(const CInitialize& object)
					{
						this->Axis = object.Axis;
					}

				public:
					//! 軸のハンドルを作成した結果クラス
					MotionApi::Axis::Result::CDeclare Axis;
				};
			}
		}

		namespace Device
		{
			namespace Result
			{
				////////////////////////////////////////////////////////////////////////////////
				/// @class      CInitialize
				/// @brief      デバイスを初期化した結果クラス
				////////////////////////////////////////////////////////////////////////////////
				class CInitialize
				{
				public:
					////////////////////////////////////////////////////////////////////////////////
					/// @brief			コンストラクタ
					////////////////////////////////////////////////////////////////////////////////
					CInitialize()
					{

					}

					////////////////////////////////////////////////////////////////////////////////
					/// @brief			コピー代入演算子
					/// @return			自クラス
					////////////////////////////////////////////////////////////////////////////////
					CInitialize& operator = (const CInitialize& object) noexcept
					{
						// 更新
						Update(object);

						return *this;
					}

					////////////////////////////////////////////////////////////////////////////////
					/// @brief			デストラクタ
					////////////////////////////////////////////////////////////////////////////////
					~CInitialize()
					{

					}

				protected:
					////////////////////////////////////////////////////////////////////////////////
					/// @brief			自クラスを更新
					/// @param[in]		object	自クラス
					////////////////////////////////////////////////////////////////////////////////
					void Update(const CInitialize& object)
					{
						this->Device = object.Device;
					}

				public:
					//! デバイスのハンドルを作成した結果クラス
					MotionApi::Device::Result::CDeclare Device;
				};
			}
		}
	}
}