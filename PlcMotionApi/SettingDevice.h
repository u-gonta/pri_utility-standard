#pragma once

#include "WrapperMotionApi/SettingDevice.h"
#include "Setting.h"

namespace Standard
{
	namespace Plc
	{
		namespace Device
		{
			namespace Setting
			{
				////////////////////////////////////////////////////////////////////////////////
				/// @class      CSuspend
				/// @brief      制御を停止する設定クラス
				///				⇒ 設定するテンプレートのクラスから派生
				///				⇒ 制御の停止を設定するクラスから派生
				////////////////////////////////////////////////////////////////////////////////
				class CSuspend
					: virtual public CTemplate, virtual public MotionApi::Device::Setting::CSuspend
				{
				public:
					////////////////////////////////////////////////////////////////////////////////
					/// @brief			コンストラクタ
					////////////////////////////////////////////////////////////////////////////////
					CSuspend() : CTemplate(), MotionApi::Device::Setting::CSuspend()
					{
						Timeout = 1000;
					}

					////////////////////////////////////////////////////////////////////////////////
					/// @brief			コピー代入演算子
					/// @return			自クラス
					////////////////////////////////////////////////////////////////////////////////
					CSuspend& operator = (const CSuspend& object) noexcept
					{
						// 更新
						Update(object);

						return *this;
					}

					////////////////////////////////////////////////////////////////////////////////
					/// @brief			デストラクタ
					////////////////////////////////////////////////////////////////////////////////
					~CSuspend()
					{

					}

				protected:
					////////////////////////////////////////////////////////////////////////////////
					/// @brief			自クラスを更新
					/// @param[in]		object	自クラス
					////////////////////////////////////////////////////////////////////////////////
					void Update(const CSuspend& object)
					{
						// 既定の関数
						CTemplate::Update(object);
						MotionApi::Device::Setting::CSuspend::Update(object);

						this->Timeout = object.Timeout;
					}

				public:
					//! タイムアウト[ms]
					unsigned short Timeout;
				};

				////////////////////////////////////////////////////////////////////////////////
				/// @class      CServo
				/// @brief      サーボを制御する設定クラス
				///				⇒ 設定するテンプレートのクラスから派生
				///				⇒ サーボの制御を行う設定クラスから派生
				////////////////////////////////////////////////////////////////////////////////
				class CServo
					: virtual public CTemplate, virtual public MotionApi::Device::Setting::CServo
				{
				public:
					////////////////////////////////////////////////////////////////////////////////
					/// @brief			コンストラクタ
					////////////////////////////////////////////////////////////////////////////////
					CServo() : CTemplate(), MotionApi::Device::Setting::CServo()
					{

					}

					////////////////////////////////////////////////////////////////////////////////
					/// @brief			コピー代入演算子
					/// @return			自クラス
					////////////////////////////////////////////////////////////////////////////////
					CServo& operator = (const CServo& object) noexcept
					{
						// 更新
						Update(object);

						return *this;
					}

					////////////////////////////////////////////////////////////////////////////////
					/// @brief			デストラクタ
					////////////////////////////////////////////////////////////////////////////////
					~CServo()
					{

					}

				protected:
					////////////////////////////////////////////////////////////////////////////////
					/// @brief			自クラスを更新
					/// @param[in]		object	自クラス
					////////////////////////////////////////////////////////////////////////////////
					void Update(const CServo& object)
					{
						// 既定の関数
						CTemplate::Update(object);
						MotionApi::Device::Setting::CServo::Update(object);
					}
				};

				////////////////////////////////////////////////////////////////////////////////
				/// @class      CMoveOrigin
				/// @brief      原点復帰を実行する設定クラス
				///				⇒ 設定するテンプレートのクラスから派生
				///				⇒ 原点復帰を実行する設定クラスから派生
				////////////////////////////////////////////////////////////////////////////////
				class CMoveOrigin
					: virtual public CTemplate, virtual public MotionApi::Device::Setting::CMoveOrigin
				{
				public:
					////////////////////////////////////////////////////////////////////////////////
					/// @brief			コンストラクタ
					////////////////////////////////////////////////////////////////////////////////
					CMoveOrigin() : CTemplate(), MotionApi::Device::Setting::CMoveOrigin()
					{

					}

					////////////////////////////////////////////////////////////////////////////////
					/// @brief			コピー代入演算子
					/// @return			自クラス
					////////////////////////////////////////////////////////////////////////////////
					CMoveOrigin& operator = (const CMoveOrigin& object) noexcept
					{
						// 更新
						Update(object);

						return *this;
					}

					////////////////////////////////////////////////////////////////////////////////
					/// @brief			デストラクタ
					////////////////////////////////////////////////////////////////////////////////
					~CMoveOrigin()
					{

					}

				protected:
					////////////////////////////////////////////////////////////////////////////////
					/// @brief			自クラスを更新
					/// @param[in]		object	自クラス
					////////////////////////////////////////////////////////////////////////////////
					void Update(const CMoveOrigin& object)
					{
						// 既定の関数
						CTemplate::Update(object);
						MotionApi::Device::Setting::CMoveOrigin::Update(object);
					}
				};

				////////////////////////////////////////////////////////////////////////////////
				/// @class      CStartJog
				/// @brief      ジョグを開始する設定クラス
				///				⇒ 設定するテンプレートのクラスから派生
				///				⇒ ジョグの開始を設定するクラスから派生
				////////////////////////////////////////////////////////////////////////////////
				class CStartJog
					: virtual public CTemplate, virtual public MotionApi::Device::Setting::CStartJog
				{
				public:
					////////////////////////////////////////////////////////////////////////////////
					/// @brief			コンストラクタ
					////////////////////////////////////////////////////////////////////////////////
					CStartJog() : CTemplate(), MotionApi::Device::Setting::CStartJog()
					{

					}

					////////////////////////////////////////////////////////////////////////////////
					/// @brief			コピー代入演算子
					/// @return			自クラス
					////////////////////////////////////////////////////////////////////////////////
					CStartJog& operator = (const CStartJog& object) noexcept
					{
						// 更新
						Update(object);

						return *this;
					}

					////////////////////////////////////////////////////////////////////////////////
					/// @brief			デストラクタ
					////////////////////////////////////////////////////////////////////////////////
					~CStartJog()
					{

					}

				protected:
					////////////////////////////////////////////////////////////////////////////////
					/// @brief			自クラスを更新
					/// @param[in]		object	自クラス
					////////////////////////////////////////////////////////////////////////////////
					void Update(const CStartJog& object)
					{
						// 既定の関数
						CTemplate::Update(object);
						MotionApi::Device::Setting::CStartJog::Update(object);
					}
				};

				////////////////////////////////////////////////////////////////////////////////
				/// @class      CStopJog
				/// @brief      ジョグを停止する設定クラス
				///				⇒ 設定するテンプレートのクラスから派生
				///				⇒ ジョグの停止を設定するクラスから派生
				////////////////////////////////////////////////////////////////////////////////
				class CStopJog
					: virtual public CTemplate, virtual public MotionApi::Device::Setting::CStopJog
				{
				public:
					////////////////////////////////////////////////////////////////////////////////
					/// @brief			コンストラクタ
					////////////////////////////////////////////////////////////////////////////////
					CStopJog() : CTemplate(), MotionApi::Device::Setting::CStopJog()
					{

					}

					////////////////////////////////////////////////////////////////////////////////
					/// @brief			コピー代入演算子
					/// @return			自クラス
					////////////////////////////////////////////////////////////////////////////////
					CStopJog& operator = (const CStopJog& object) noexcept
					{
						// 更新
						Update(object);

						return *this;
					}

					////////////////////////////////////////////////////////////////////////////////
					/// @brief			デストラクタ
					////////////////////////////////////////////////////////////////////////////////
					~CStopJog()
					{

					}

				protected:
					////////////////////////////////////////////////////////////////////////////////
					/// @brief			自クラスを更新
					/// @param[in]		object	自クラス
					////////////////////////////////////////////////////////////////////////////////
					void Update(const CStopJog& object)
					{
						// 既定の関数
						CTemplate::Update(object);
						MotionApi::Device::Setting::CStopJog::Update(object);
					}
				};
			}
		}
	}
}