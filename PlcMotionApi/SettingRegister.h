#pragma once

#include "WrapperMotionApi/SettingRegister.h"

namespace Standard
{
	namespace Plc
	{
		namespace Register
		{
			namespace Setting
			{
				////////////////////////////////////////////////////////////////////////////////
				/// @class      CTemplate
				/// @brief      レジスタを設定するテンプレートのクラス
				///				⇒ 設定するテンプレートのクラスから継承
				////////////////////////////////////////////////////////////////////////////////
				class CTemplate
					: virtual public Plc::CTemplate
				{
				public:
					////////////////////////////////////////////////////////////////////////////////
					/// @brief			コンストラクタ
					////////////////////////////////////////////////////////////////////////////////
					CTemplate() : Plc::CTemplate()
					{
						Category = "";
						Index = 0;
					}

					////////////////////////////////////////////////////////////////////////////////
					/// @brief			コピー代入演算子
					/// @return			自クラス
					////////////////////////////////////////////////////////////////////////////////
					CTemplate& operator = (const CTemplate& object) noexcept
					{
						// 更新
						Update(object);

						return *this;
					}

					////////////////////////////////////////////////////////////////////////////////
					/// @brief			デストラクタ
					////////////////////////////////////////////////////////////////////////////////
					virtual ~CTemplate()
					{

					}

				protected:
					////////////////////////////////////////////////////////////////////////////////
					/// @brief			自クラスを更新
					/// @param[in]		object	自クラス
					////////////////////////////////////////////////////////////////////////////////
					void Update(const CTemplate& object)
					{
						// 既定の関数
						Plc::CTemplate::Update(object);

						this->Declare = object.Declare;
						this->Category = object.Category;
						this->Index = object.Index;
					}

				public:
					//! レジスタのハンドルを作成する設定クラス
					MotionApi::Register::Setting::CDeclare Declare;

					//! 種別
					std::string Category;

					//! 番号
					unsigned long Index;
				};

				////////////////////////////////////////////////////////////////////////////////
				/// @class      CGetContent
				/// @brief      レジスタの値を取得する設定クラス
				///				⇒ レジスタを設定するテンプレートのクラスから継承
				////////////////////////////////////////////////////////////////////////////////
				class CGetContent
					: virtual public CTemplate
				{
				public:
					////////////////////////////////////////////////////////////////////////////////
					/// @brief			コンストラクタ
					////////////////////////////////////////////////////////////////////////////////
					CGetContent() : CTemplate()
					{
						Size = 0;
					}

					////////////////////////////////////////////////////////////////////////////////
					/// @brief			コピー代入演算子
					/// @return			自クラス
					////////////////////////////////////////////////////////////////////////////////
					CGetContent& operator = (const CGetContent& object) noexcept
					{
						// 更新
						Update(object);

						return *this;
					}

					////////////////////////////////////////////////////////////////////////////////
					/// @brief			デストラクタ
					////////////////////////////////////////////////////////////////////////////////
					~CGetContent()
					{

					}

				protected:
					////////////////////////////////////////////////////////////////////////////////
					/// @brief			自クラスを更新
					/// @param[in]		object	自クラス
					////////////////////////////////////////////////////////////////////////////////
					void Update(const CGetContent& object)
					{
						// 既定の関数
						CTemplate::Update(object);

						this->Size = object.Size;
					}

				public:
					//! レジスタを読み込むサイズ
					unsigned long Size;
				};

				////////////////////////////////////////////////////////////////////////////////
				/// @class      CSetContent
				/// @brief      レジスタの値を更新する設定クラス
				///				⇒ レジスタを設定するテンプレートのクラスから継承
				////////////////////////////////////////////////////////////////////////////////
				class CSetContent
					: virtual public CTemplate
				{
				public:
					////////////////////////////////////////////////////////////////////////////////
					/// @brief			コンストラクタ
					////////////////////////////////////////////////////////////////////////////////
					CSetContent() : CTemplate()
					{

					}

					////////////////////////////////////////////////////////////////////////////////
					/// @brief			コピー代入演算子
					/// @return			自クラス
					////////////////////////////////////////////////////////////////////////////////
					CSetContent& operator = (const CSetContent& object) noexcept
					{
						// 更新
						Update(object);

						return *this;
					}

					////////////////////////////////////////////////////////////////////////////////
					/// @brief			デストラクタ
					////////////////////////////////////////////////////////////////////////////////
					~CSetContent()
					{

					}

				protected:
					////////////////////////////////////////////////////////////////////////////////
					/// @brief			自クラスを更新
					/// @param[in]		object	自クラス
					////////////////////////////////////////////////////////////////////////////////
					void Update(const CSetContent& object)
					{
						// 既定の関数
						CTemplate::Update(object);

						this->Values.clear();
						std::copy(object.Values.begin(), object.Values.end(), std::back_inserter(this->Values));
					}

				public:
					//! 値
					std::vector<short> Values;
				};
			}
		}
	}
}