#pragma once

namespace Standard
{
	namespace Signal
	{
		namespace Result
		{
			////////////////////////////////////////////////////////////////////////////////
			/// @class      CTemplate
			/// @brief      状態を監視した結果を保持するテンプレートのクラス
			////////////////////////////////////////////////////////////////////////////////
			class CTemplate
			{
			public:
				////////////////////////////////////////////////////////////////////////////////
				/// @brief			コンストラクタ
				////////////////////////////////////////////////////////////////////////////////
				CTemplate()
				{
					Suspension = false;
					Message = "";
				}

				////////////////////////////////////////////////////////////////////////////////
				/// @brief			コピー代入演算子
				/// @return			自クラス
				////////////////////////////////////////////////////////////////////////////////
				CTemplate& operator = (const CTemplate& object) noexcept
				{
					// 更新
					Update(object);

					return *this;
				}

				////////////////////////////////////////////////////////////////////////////////
				/// @brief			デストラクタ
				////////////////////////////////////////////////////////////////////////////////
				virtual ~CTemplate()
				{

				}

			protected:
				////////////////////////////////////////////////////////////////////////////////
				/// @brief			自クラスを更新
				/// @param[in]		object	自クラス
				////////////////////////////////////////////////////////////////////////////////
				void Update(const CTemplate& object)
				{
					this->Suspension = object.Suspension;
					this->Message = object.Message;
				}

			public:
				//! 中断フラグ
				bool Suspension;

				//! メッセージ
				std::string Message;
			};
		}
	}
}