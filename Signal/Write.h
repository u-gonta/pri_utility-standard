#pragma once

#include "Subject.h"

namespace Standard
{
	namespace Signal
	{
		namespace Write
		{
			////////////////////////////////////////////////////////////////////////////////
			/// @class      CBasis
			/// @brief      状態を監視する情報の基礎クラス
			/// @param[in]	CArgument	通知する情報のクラス(テンプレートで指定)
			/// @param[in]	FCalled	通知を呼び出す関数ポインタ(テンプレートで指定)
			////////////////////////////////////////////////////////////////////////////////
			template <typename CArgument, typename FCalled>
			class CBasis
			{
			public:
				////////////////////////////////////////////////////////////////////////////////
				/// @brief			コンストラクタ
				////////////////////////////////////////////////////////////////////////////////
				CBasis()
				{

				}

				////////////////////////////////////////////////////////////////////////////////
				/// @brief			コピー代入演算子
				/// @return			自クラス
				////////////////////////////////////////////////////////////////////////////////
				CBasis& operator = (const CBasis& object) noexcept
				{
					// 更新
					Update(object);

					return *this;
				}

				////////////////////////////////////////////////////////////////////////////////
				/// @brief			デストラクタ
				////////////////////////////////////////////////////////////////////////////////
				virtual ~CBasis()
				{

				}

			protected:
				////////////////////////////////////////////////////////////////////////////////
				/// @brief			自クラスを更新
				/// @param[in]		object	自クラス
				////////////////////////////////////////////////////////////////////////////////
				void Update(const CBasis& object)
				{
					this->Subject = object.Subject;
				}

			public:
				//! 監視後に通知するクラス
				Signal::CSubject<CArgument, FCalled> Subject;
			};
		}
	}
}