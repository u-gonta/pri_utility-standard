#pragma once

// 1バイトアラインメントに変更
#pragma pack(1)

namespace Standard
{
	namespace MotionApi
	{
		//! 未接続
		const unsigned long ConstDisconnected = 0;

		////////////////////////////////////////////////////////////////////////////////
		/// @class      CIdentifier
		/// @brief      識別子を保持するクラス
		////////////////////////////////////////////////////////////////////////////////
		class CIdentifier
		{
		public:
			////////////////////////////////////////////////////////////////////////////////
			/// @brief			コンストラクタ
			////////////////////////////////////////////////////////////////////////////////
			CIdentifier()
			{
				Handle = ConstDisconnected;
			}

			////////////////////////////////////////////////////////////////////////////////
			/// @brief			コピー代入演算子
			/// @return			自クラス
			////////////////////////////////////////////////////////////////////////////////
			CIdentifier& operator = (const CIdentifier& object) noexcept
			{
				// 更新
				Update(object);

				return *this;
			}

			////////////////////////////////////////////////////////////////////////////////
			/// @brief			デストラクタ
			////////////////////////////////////////////////////////////////////////////////
			virtual ~CIdentifier()
			{

			}

		protected:
			////////////////////////////////////////////////////////////////////////////////
			/// @brief			自クラスを更新
			/// @param[in]		object	自クラス
			////////////////////////////////////////////////////////////////////////////////
			void Update(const CIdentifier& object)
			{
				this->Handle = object.Handle;
			}

		public:
			//! ハンドル
			unsigned long Handle;
		};
	}
}

// バイトアラインメントを戻す
#pragma pack()
