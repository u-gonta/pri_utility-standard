#pragma once

#include "Identifier.h"

// 1バイトアラインメントに変更
#pragma pack(1)

namespace Standard
{
	namespace MotionApi
	{
		namespace Controller
		{
			namespace Result
			{
				////////////////////////////////////////////////////////////////////////////////
				/// @class      COpen
				/// @brief      コントローラを開いた結果クラス
				///				⇒ 識別子を保持するクラスから派生
				////////////////////////////////////////////////////////////////////////////////
				class COpen
					: virtual public CIdentifier
				{
				public:
					////////////////////////////////////////////////////////////////////////////////
					/// @brief			コンストラクタ
					////////////////////////////////////////////////////////////////////////////////
					COpen() : CIdentifier()
					{

					}

					////////////////////////////////////////////////////////////////////////////////
					/// @brief			コピー代入演算子
					/// @return			自クラス
					////////////////////////////////////////////////////////////////////////////////
					COpen& operator = (const COpen& object) noexcept
					{
						// 更新
						Update(object);

						return *this;
					}

					////////////////////////////////////////////////////////////////////////////////
					/// @brief			デストラクタ
					////////////////////////////////////////////////////////////////////////////////
					~COpen()
					{

					}

				protected:
					////////////////////////////////////////////////////////////////////////////////
					/// @brief			自クラスを更新
					/// @param[in]		object	自クラス
					////////////////////////////////////////////////////////////////////////////////
					void Update(const COpen& object)
					{
						// 既定の関数
						CIdentifier::Update(object);
					}
				};
			}
		}

		namespace Register
		{
			namespace Result
			{
				////////////////////////////////////////////////////////////////////////////////
				/// @class      CDeclare
				/// @brief      レジスタのハンドルを作成した結果クラス
				///				⇒ 識別子を保持するクラスから派生
				////////////////////////////////////////////////////////////////////////////////
				class CDeclare
					: virtual public CIdentifier
				{
				public:
					////////////////////////////////////////////////////////////////////////////////
					/// @brief			コンストラクタ
					////////////////////////////////////////////////////////////////////////////////
					CDeclare() : CIdentifier()
					{

					}

					////////////////////////////////////////////////////////////////////////////////
					/// @brief			コピー代入演算子
					/// @return			自クラス
					////////////////////////////////////////////////////////////////////////////////
					CDeclare& operator = (const CDeclare& object) noexcept
					{
						// 更新
						Update(object);

						return *this;
					}

					////////////////////////////////////////////////////////////////////////////////
					/// @brief			デストラクタ
					////////////////////////////////////////////////////////////////////////////////
					~CDeclare()
					{

					}

				protected:
					////////////////////////////////////////////////////////////////////////////////
					/// @brief			自クラスを更新
					/// @param[in]		object	自クラス
					////////////////////////////////////////////////////////////////////////////////
					void Update(const CDeclare& object)
					{
						// 既定の関数
						CIdentifier::Update(object);
					}
				};

				////////////////////////////////////////////////////////////////////////////////
				/// @class      CContent
				/// @brief      レジスタの値クラス
				////////////////////////////////////////////////////////////////////////////////
				class CContent
				{
				public:
					////////////////////////////////////////////////////////////////////////////////
					/// @brief			コンストラクタ
					////////////////////////////////////////////////////////////////////////////////
					CContent()
					{
						Size = 0;
					}

					////////////////////////////////////////////////////////////////////////////////
					/// @brief			コピー代入演算子
					/// @return			自クラス
					////////////////////////////////////////////////////////////////////////////////
					CContent& operator = (const CContent& object) noexcept
					{
						// 更新
						Update(object);

						return *this;
					}

					////////////////////////////////////////////////////////////////////////////////
					/// @brief			デストラクタ
					////////////////////////////////////////////////////////////////////////////////
					~CContent()
					{

					}

				protected:
					////////////////////////////////////////////////////////////////////////////////
					/// @brief			自クラスを更新
					/// @param[in]		object	自クラス
					////////////////////////////////////////////////////////////////////////////////
					void Update(const CContent& object)
					{
						this->Buffers.clear();
						std::copy(object.Buffers.begin(), object.Buffers.end(), std::back_inserter(this->Buffers));
						this->Size = object.Size;
					}

				public:
					//! レジスタのデータ
					std::vector<unsigned short> Buffers;

					//! レジスタの操作したデータ数
					unsigned long Size;
				};
			}
		}

		namespace Axis
		{
			namespace Result
			{
				////////////////////////////////////////////////////////////////////////////////
				/// @class      CDeclare
				/// @brief      軸のハンドルを作成した結果クラス
				///				⇒ 識別子を保持するクラスから派生
				////////////////////////////////////////////////////////////////////////////////
				class CDeclare
					: virtual public CIdentifier
				{
				public:
					////////////////////////////////////////////////////////////////////////////////
					/// @brief			コンストラクタ
					////////////////////////////////////////////////////////////////////////////////
					CDeclare() : CIdentifier()
					{

					}

					////////////////////////////////////////////////////////////////////////////////
					/// @brief			コピー代入演算子
					/// @return			自クラス
					////////////////////////////////////////////////////////////////////////////////
					CDeclare& operator = (const CDeclare& object) noexcept
					{
						// 更新
						Update(object);

						return *this;
					}

					////////////////////////////////////////////////////////////////////////////////
					/// @brief			デストラクタ
					////////////////////////////////////////////////////////////////////////////////
					~CDeclare()
					{

					}

				protected:
					////////////////////////////////////////////////////////////////////////////////
					/// @brief			自クラスを更新
					/// @param[in]		object	自クラス
					////////////////////////////////////////////////////////////////////////////////
					void Update(const CDeclare& object)
					{
						// 既定の関数
						CIdentifier::Update(object);
					}
				};
			}
		}

		namespace Device
		{
			namespace Result
			{
				////////////////////////////////////////////////////////////////////////////////
				/// @class      CDevice
				/// @brief      デバイスのハンドルを作成した結果クラス
				///				⇒ 識別子を保持するクラスから派生
				////////////////////////////////////////////////////////////////////////////////
				class CDeclare
					: virtual public CIdentifier
				{
				public:
					////////////////////////////////////////////////////////////////////////////////
					/// @brief			コンストラクタ
					////////////////////////////////////////////////////////////////////////////////
					CDeclare() : CIdentifier()
					{

					}

					////////////////////////////////////////////////////////////////////////////////
					/// @brief			コピー代入演算子
					/// @return			自クラス
					////////////////////////////////////////////////////////////////////////////////
					CDeclare& operator = (const CDeclare& object) noexcept
					{
						// 更新
						Update(object);

						return *this;
					}

					////////////////////////////////////////////////////////////////////////////////
					/// @brief			デストラクタ
					////////////////////////////////////////////////////////////////////////////////
					~CDeclare()
					{

					}

				protected:
					////////////////////////////////////////////////////////////////////////////////
					/// @brief			自クラスを更新
					/// @param[in]		object	自クラス
					////////////////////////////////////////////////////////////////////////////////
					void Update(const CDeclare& object)
					{
						// 既定の関数
						CIdentifier::Update(object);
					}
				};
			}
		}
	}
}

// バイトアラインメントを戻す
#pragma pack()