#pragma once

#include <vector>

#include "Identifier.h"

// 1バイトアラインメントに変更
#pragma pack(1)

namespace Standard
{
	namespace MotionApi
	{
		namespace Register
		{
			namespace Setting
			{
				////////////////////////////////////////////////////////////////////////////////
				/// @class      CDeclare
				/// @brief      レジスタのハンドルを作成する設定クラス
				////////////////////////////////////////////////////////////////////////////////
				class CDeclare
				{
				public:
					////////////////////////////////////////////////////////////////////////////////
					/// @brief			コンストラクタ
					////////////////////////////////////////////////////////////////////////////////
					CDeclare()
					{
						Address = "";
					}

					////////////////////////////////////////////////////////////////////////////////
					/// @brief			コピー代入演算子
					/// @return			自クラス
					////////////////////////////////////////////////////////////////////////////////
					CDeclare& operator = (const CDeclare& object) noexcept
					{
						// 更新
						Update(object);

						return *this;
					}

					////////////////////////////////////////////////////////////////////////////////
					/// @brief			デストラクタ
					////////////////////////////////////////////////////////////////////////////////
					~CDeclare()
					{

					}

				protected:
					////////////////////////////////////////////////////////////////////////////////
					/// @brief			自クラスを更新
					/// @param[in]		object	自クラス
					////////////////////////////////////////////////////////////////////////////////
					void Update(const CDeclare& object)
					{
						this->Address = object.Address;
					}

				public:
					//! アドレス
					std::string Address;
				};

				////////////////////////////////////////////////////////////////////////////////
				/// @class      CGetContent
				/// @brief      レジスタの値を取得する設定クラス
				///				⇒ 識別子を保持するクラスから派生
				////////////////////////////////////////////////////////////////////////////////
				class CGetContent
					: virtual public CIdentifier
				{
				public:
					////////////////////////////////////////////////////////////////////////////////
					/// @brief			コンストラクタ
					////////////////////////////////////////////////////////////////////////////////
					CGetContent() : CIdentifier()
					{
						Size = 0;
					}

					////////////////////////////////////////////////////////////////////////////////
					/// @brief			コピー代入演算子
					/// @return			自クラス
					////////////////////////////////////////////////////////////////////////////////
					CGetContent& operator = (const CGetContent& object) noexcept
					{
						// 更新
						Update(object);

						return *this;
					}

					////////////////////////////////////////////////////////////////////////////////
					/// @brief			デストラクタ
					////////////////////////////////////////////////////////////////////////////////
					~CGetContent()
					{

					}

				protected:
					////////////////////////////////////////////////////////////////////////////////
					/// @brief			自クラスを更新
					/// @param[in]		object	自クラス
					////////////////////////////////////////////////////////////////////////////////
					void Update(const CGetContent& object)
					{
						// 既定の関数
						CIdentifier::Update(object);

						this->Size = object.Size;
					}

				public:
					//! レジスタを操作するデータ数
					unsigned long Size;
				};

				////////////////////////////////////////////////////////////////////////////////
				/// @class      CSetContent
				/// @brief      レジスタの値を更新する設定クラス
				///				⇒ 識別子を保持するクラスから派生
				////////////////////////////////////////////////////////////////////////////////
				class CSetContent
					: virtual public CIdentifier
				{
				public:
					////////////////////////////////////////////////////////////////////////////////
					/// @brief			コンストラクタ
					////////////////////////////////////////////////////////////////////////////////
					CSetContent() : CIdentifier()
					{
						Size = 0;
					}

					////////////////////////////////////////////////////////////////////////////////
					/// @brief			コピー代入演算子
					/// @return			自クラス
					////////////////////////////////////////////////////////////////////////////////
					CSetContent& operator = (const CSetContent& object) noexcept
					{
						// 更新
						Update(object);

						return *this;
					}

					////////////////////////////////////////////////////////////////////////////////
					/// @brief			デストラクタ
					////////////////////////////////////////////////////////////////////////////////
					~CSetContent()
					{

					}

				protected:
					////////////////////////////////////////////////////////////////////////////////
					/// @brief			自クラスを更新
					/// @param[in]		object	自クラス
					////////////////////////////////////////////////////////////////////////////////
					void Update(const CSetContent& object)
					{
						// 既定の関数
						CIdentifier::Update(object);

						this->Buffers.clear();
						std::copy(object.Buffers.begin(), object.Buffers.end(), std::back_inserter(this->Buffers));
						this->Size = object.Size;
					}

				public:
					//! レジスタのデータ
					std::vector<unsigned short> Buffers;

					//! レジスタを更新するデータ数
					unsigned long Size;
				};
			}
		}
	}
}

// バイトアラインメントを戻す
#pragma pack()
